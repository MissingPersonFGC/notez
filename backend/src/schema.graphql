# import * from './generated/prisma.graphql'

type SuccessMessage {
    message: String
}

type Mutation {
    
    # Create the mutation for creating new users.
    signup(
        email: String!
        password: String!
        verifyPassword: String!
        username: String!
    ): User!

    # Create mutation for logging in new user
    signin(
        email: String!
        password: String!
    ): User!

    # Create mutation that will handle creating a reset token for password resets.
    requestReset(email: String!): SuccessMessage

    # Reset the password
    resetPassword(
        resetToken: String!
        password: String!
        verifyPassword: String!
    ): User!

    # Simple sign-out mutation
    signout: SuccessMessage

    # Update users' permissions
    updatePermissions(
        permissions: [Permission]
        userId: ID!
    ): User

    # Allow users to change their password
    changePassword(
        oldPassword: String!
        newPassword: String!
        verifyNewPassword: String!
    ): User

    # Create game
    createGame(
        name: String!
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_TW: String
        name_zh_HK: String
    ): Game!

    createCharacter(
        name: String!
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_TW: String
        name_zh_HK: String
        game: String!
    ): Character!

    createGameFilter(
        name: String!
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_TW: String
        name_zh_HK: String
        isGlobal: Boolean!
        game: String
    ): GameFilter!

    createPlayerFilter(
        name: String!
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_TW: String
        name_zh_HK: String
    ): PlayerFilter!

    createGameNote(
        name: String!
        you: String!
        opponent: String!
        filter: String!
        note: String!
    ): GameNote!

    createPlayerNote(
        opponent: String!
        name: String!
        filter: String!
        note: String!
    ): PlayerNote!

    updateCharacter(
        name: String
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_HK: String
        name_zh_TW: String
        id: ID!
        games: [ID]
    ): Character!

    updateGame(
        name: String
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_HK: String
        name_zh_TW: String
        id: ID!
    ): Game!

    updateGameFilter(
        name: String
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_HK: String
        name_zh_TW: String
        id: ID!
    ): GameFilter!

    updatePlayerFilter(
        name: String
        name_ja: String
        name_ko: String
        name_zh_CN: String
        name_zh_HK: String
        name_zh_TW: String
        id: ID!
    ): PlayerFilter!

    updateCharacterRelation(
        id: ID!
        game: String
    ): Character!

    updateGameFilterRelation(
        id: ID!
        game: String
    ): GameFilter!
}

type Query {
    # Get the current user if logged in.
    me: User

    # Pull all users for updating permissions
    users: [User]!

    # Query for all games
    games(
        where: GameWhereInput
        orderBy: GameOrderByInput
    ): [Game]!

    characters(
        where: CharacterWhereInput
        orderBy: CharacterOrderByInput
    ): [Character]!

    gameFilters(
        where: GameFilterWhereInput
        orderBy: GameFilterOrderByInput
    ): [GameFilter]!

    playerFilters(
        where: PlayerFilterWhereInput
        orderBy: PlayerFilterOrderByInput
    ): [PlayerFilter]!
    
    gameNotes(
        where: GameNoteWhereInput
        orderBy: GameNoteOrderByInput
    ): [GameNote]!

    playerNotes(
        where: PlayerNoteWhereInput
        orderBy: PlayerNoteOrderByInput
    ): [PlayerNote]!
}