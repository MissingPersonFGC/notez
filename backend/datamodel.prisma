enum Permission {
  ADMIN
  USER
  NOTEUPDATE
  NOTEDELETE
  PERMISSIONUPDATE
  GAMECREATE
  BAN
}

# Player needs a relationship to Game Notes and Player Notes for the list. Also needs unique username and email address, so someone can't use the same username, or register more than once.
type User {
  id: ID! @unique
  username: String! @unique
  email: String! @unique
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission]
  playerNotes: [PlayerNote]!
  gameNote: [GameNote]!
}

# Game needs a relationship to filters and characters, also needs fields for i18n.
type Game {
  id: ID! @unique
  name: String! @unique
  name_jp: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  characters: [Character]
  filters: [Filter]
}

# Characters need a relationship with game, also needs fields for i18n.
type Character {
  id: ID! @unique
  name: String! @unique
  name_jp: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  games: [Game]
}

# Filters need a relationship with game, also needs fields for i18n.
type Filter {
  id: ID! @unique
  name: String! @unique
  name_jp: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  games: [Game]
}

# Game notes need to tie the characters to player and opponent, also needs to grab the proper filter and game.
type GameNote {
  id: ID! @unique
  opponent: Character!
  you: Character!
  filter: Filter!
  note: String!
  game: Game!
  user: [User]!
}

# Player notes need to grab the proper filter and game.
type PlayerNote {
  id: ID! @unique
  opponent: String
  game: Game!
  filter: Filter!
  note: String!
  user: [User]!
}