enum Permission {
  ADMIN
  USER
  NOTEUPDATE
  NOTEDELETE
  PERMISSIONUPDATE
  GAMECREATE
  BAN
}

# Player needs a relationship to Game Notes and Player Notes for the list. Also needs unique username and email address, so someone can't use the same username, or register more than once.
type User {
  id: ID! @unique @id
  username: String! @unique
  email: String! @unique
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission] @scalarList(strategy: RELATION)
  playerNotes: [PlayerNote]! @scalarList(strategy: RELATION)
  gameNotes: [GameNote]! @scalarList(strategy: RELATION)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

# Game needs a relationship to filters and characters, also needs fields for i18n.
type Game {
  id: ID! @unique @id
  name: String! @unique
  name_ja: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  characters: [Character]
  filters: [GameFilter]
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

# Characters need a relationship with game, also needs fields for i18n.
type Character {
  id: ID! @unique @id
  name: String!
  name_ja: String
  name_ko: String
  name_zh_CN: String
  name_zh_TW: String
  name_zh_HK: String
  games: [Game]
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

# Filters need a relationship with game, also needs fields for i18n.
type GameFilter {
  id: ID! @unique @id
  isGlobal: Boolean!
  name: String! @unique
  name_ja: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  games: [Game]
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

type PlayerFilter {
  id: ID! @unique @id
  name: String! @unique
  name_ja: String @unique
  name_ko: String @unique
  name_zh_CN: String @unique
  name_zh_TW: String @unique
  name_zh_HK: String @unique
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

# Game notes need to tie the characters to player and opponent, also needs to grab the proper filter and game.
type GameNote {
  id: ID! @unique @id
  opponent: Character! @relation(name: "OpponentOnNote")
  you: Character! @relation(name: "YouOnNote")
  filter: GameFilter!
  note: String!
  game: Game!
  user: [User]!
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

# Player notes need to grab the proper filter and game. Also passing users in an array so that I can add in sharing later.
type PlayerNote {
  id: ID! @unique @id
  opponent: String
  game: Game!
  filter: PlayerFilter!
  note: String!
  user: [User]!
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}
